import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.impute import SimpleImputer
import time

# Load data from a CSV file into a pandas DataFrame
data_frame = pd.read_csv(r"C:\data\GBP_JPY.csv")

# Convert non-numeric data to NaN
data_frame = data_frame.apply(pd.to_numeric, errors='coerce')

# Replace NaN values with the mean
imputer = SimpleImputer()
data_frame = pd.DataFrame(imputer.fit_transform(data_frame))

# Convert the DataFrame to a numpy array
data = data_frame.values

# Apply PCA to the data
pca = PCA(n_components=4)
X_pca = pca.fit_transform(data)

# Analyze the first two principal components
pc1 = X_pca[:, 0]
pc2 = X_pca[:, 1]

# Define the buy and sell thresholds
buy_threshold = 0.0005
sell_threshold = -0.0005

# Define trading variables
entry_price = 0.0
exit_price = 0.0
position_size = 1000
pnl = 0.0

# Calculate starting PnL
starting_price = data[0, 3]
print('Starting price:', starting_price)

# Simulate 100 trades
for i in range(1000):
    # Determine the trading signal based on the first principal component
    if pc1[-1] > pc1[0]:
        if pc1[-1] > buy_threshold:
            # Enter long position
            entry_price = data[-1, 3]
            print('Buy at', entry_price)
        elif pc1[-1] < sell_threshold:
            # Enter short position
            entry_price = data[-1, 3]
            print('Sell at', entry_price)
        else:
            entry_price = 0.0
            print('None')
    elif pc1[-1] < sell_threshold:
        # Enter short position
        entry_price = data[-1, 3]
        print('Sell at', entry_price)
    elif pc1[-1] > buy_threshold:
        # Enter long position
        entry_price = data[-1, 3]
        print('Buy at', entry_price)
    else:
        entry_price = 0.0
        print('None')

    # Shift the data and append the next minute's data
    data = np.roll(data, -1, axis=0)
    data[-1] = data_frame.iloc[i + 1]

    # Apply PCA to the updated data
    X_pca = pca.transform(data)

    # Analyze the first two principal components
    pc1 = X_pca[:, 0]
    pc2 = X_pca[:, 1]

    # Determine exit price and calculate PnL
    exit_price = data[-1, 3]
    if entry_price != 0.0:
        pnl += position_size * (exit_price - entry_price)
        print('Exit price:', exit_price)
        print('PnL:', position_size * (exit_price - entry_price))
    else:
        print('No position taken')

    # Wait for 1 minute before repeating the loop
    time.sleep(.000001)

# Print final PnL
print('Final PnL:', pnl)

